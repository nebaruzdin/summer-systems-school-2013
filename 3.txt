------------------------------------------------------------------------
1. Опишите, пожалуйста, подходы к адаптации/использованию.

Основные подходы к адаптации ПО:

 * Портирование самого приложения — переписывание всех
   платформо-зависимых участков кода в программе. В результате
   получается весьма эффективная версия приложения, что, однако, требует
   больших усилий не только при самом портировании, но и при последующей
   поддержке данной программы.

 * Портирование на уровне библиотек — перенос на целевую платформу тех
   библиотек, которые обеспечивают работу большинства приложений, как
   то: C Posix library и стандартная библиотека Си.

 * Портирование на уровне API операционной системы — создание слоя
   совместимости между обращениями к функциям исходной системы и реально
   выполняемыми функциями целевой системы, как это реализовано в Wine.

 * Портирование на аппаратном уровне — разработка средств, позволяющих
   так или иначе эмулировать работу исходной системы на целевой.


------------------------------------------------------------------------
2. Продемонстрируйте, пожалуйста, на примере любой функции POSIX (кроме
   time).

Стандартная библиотека Си содержит функции семейства malloc(),
позволяющие динамически выделять память. Реализация malloc()
основывается на системном вызове, непосредственно запрашивающем у
системы память большими кусками, из которых память затем по
необходимости раздаётся приложению. Роль этого системного вызова, как
правило, выполняет mmap(). Таким образом, мы можем использовать в L4Re
код функции malloc() без изменений, если предоставим реализацию mmap().
Соответствующая реализация находится в L4Re VFS library — библиотеке,
которая выполняет роль бэкэнда для стандартной библиотеки Си. Данная
реализация уже опирается на стандартные средства системы, такие как
dataspaces.


------------------------------------------------------------------------
3. Объясните, пожалуйста, плюсы и минусы переноса драйвера в userspace.

Согласно философии построения микроядер, все компоненты ОС, за
исключением самых важных, для которых важна работа именно внутри ядра,
должны работать в пространстве пользователя. Драйвера не являются
компонентами ОС, критичными для работы системы, поэтому нет
необходимости держать их в ядре.

Более того, драйверы являются частью ОС, наиболее подверженной ошибкам.
Учитывая, что некоторые устройства в вычислительной системе могут не
использоваться или использоваться редко, разумно хотеть, чтобы от
драйверов, поддерживающих эти устройства, не зависела работа остальной
системы. С другой стороны, вынос драйверов в юзерспейс также мешает
подсистемам ядра непреднамеренно повлиять на работу драйвера.

В юзерспейсе каждый драйвер имеет собственное адресное пространство, что
повышает стабильность системы. Благодаря такой изоляции, ошибка в одном
драйвере не повлечёт за собой падение других компонентов или всей
системы.

Однако при реализации драйверов в пространстве пользователя, во-первых,
возникают накладные расходы на переключения контекстов между ядром и
драйверами, так как работа драйверов зачастую требует выполнения
привилегированных команд.

Во-вторых, необходимо реализовать hardware multiplexing. Это означает,
что в случае, когда несколько приложений одновременно требуют
использования одного устройства, должен обеспечиваться такой режим
общения процессов с устройством, при котором с точки зрения каждого из
приложений общение будет носить эксклюзивный характер.


------------------------------------------------------------------------
4. Каким образом обрабатываются прерывания в системе?

Все аппаратные прерывания отображаются ядром на особый объект,
называемый IRQ kernel object. Приложение выполняет вызов
l4_irq_attach(), сигнализируя о том, что хочет обрабатывать прерывания
от этого IRQ-объекта. И начинает ожидать прерывания, используя вызов
l4_irq_receive().

К каждому IRQ-объекту может присоединиться только один поток, однако
поток может присоединяться к нескольким IRQ-объектам и ожидать
прерывание от любого из них с помощью l4_ipc_wait().

В случае, если IRQ разделяется между несколькими устройствами, возможно
создать для каждого из них свой IRQ-объект и сцепить их между собой
функцией chain(). Это позволяет последовательно опрашивать драйвера
устройств с целью узнать, кому из них предназначалось данное прерывание.


------------------------------------------------------------------------
5. Каким образом ядро предоставляет доступ пользовательским приложениям
   к портам ввода-вывода?

Когда приложение пытается получить доступ к I/O-портам, ядро проверяет,
обладает ли оно необходимым уровнем I/O-привилегий и, если нет,
проверяет I/O bitmap. В битовой карте каждому порту соответствует один
бит; если он равен нулю — приложение имеет доступ к соответствующему
порту, если единице — не имеет. Каждому процессу в системе ставится в
соответствие собственная битовая карта, указатель на которую хранится в
специальной структуре ядра, называемой TSS (task state segment). Ядро
Fiasco меняет I/O map base address с каждым переключением процесса и,
таким образом, позволяет для каждого процесса в системе иметь отдельные
права доступа к портам.

Делегирование прав доступа к портам осуществляется при помощи IPC и
flexpages подобно тому, как выполняется выделение памяти. Sigma0
является тем процессом, который изначально имеет права доступа ко всем
портам.


------------------------------------------------------------------------
6. Каким образом память устройств отображаются в пространство драйвера?

С позиции ядра нет разницы между обычной оперативной памятью и памятью
устройств, для него это всё является частями единого ресурса.
Разделением памяти при обращении по конкретному физическому адресу
занимается чипсет. Таким образом, для доступа к памяти устройств не
требуется специальных команд и можно воспользоваться тем же механизмом
виртуальной памяти для того, чтобы отобразить её на виртуальное адресное
пространство. Обращение к памяти устройства выглядит для драйвера как
присоединение к своему адресному пространству dataspace, содержащего эту
память. Выделением этих dataspaces в конечном итоге занимается, опять
же, Sigma0.


------------------------------------------------------------------------
7. Что такое virtual PCI bus и каким образом работает?

Virtual PCI bus называется часть механизма изоляции ресурсов, доступных
по PCI-шине. Вместо того, чтобы непосредственно обращаться к
конфигурационному пространству PCI, драйверы обращаются с помощью
IPC-запросов к I/O-серверу, предоставляющему доступ только к тем
ресурсам шины, которые должны быть доступны данному драйверу.
Совокупность таких ресурсов, доступных конкретному драйверу через
I/O-сервер и называется виртуальной PCI-шиной.


------------------------------------------------------------------------
8. Что такое DDE/Linux, DDEkit, что собой представляют, как работают?

Device Driver Environment — это слой совместимости между драйвером одной
ОС и средой выполнения другой ОС, который позволяет повторно
использовать уже существующие реализации драйвера для обеспечения работы
устройств под управлением новых ОС. Так, DDE/Linux обеспечивает
отображение Linux API на родные средства L4Re/Fiasco.OC.

Для этого используется несколько потоков, каждый из которых обеспечивает
некоторый функционал, присущий Linux-окружению. Потоки организованы
таким образом, чтобы эмулировать работу системы с SMP-архитектурой.
Часть функциональности ядра Linux выполнена в качестве обёрток над
средствами L4: например, kmalloc() реализован при помощью L4 библиотеки,
которая обеспечивает выделение памяти по схеме SLAB. Также DDE/Linux
отображает механизмы Linux для доступа к физическим ресурсам на вызовы,
специфичные для L4: например, попытки доступа к конфигурационному
пространству PCI преобразуются в IPC-запросы к I/O-серверу.

DDE Сonstruction Kit — это ещё один слой абстракции — набор библиотек,
предоставляющий функциональность, разделяемую между большинством DDE, и,
таким образом, обеспечивающий ещё большую гибкость и уменьшает
количество кода (и, соответственно, усилий), требуемое для реализации
новых DDE.

Тот факт, что DDE основываются на DDEkit, позволяет портировать
последний на другие системы и обеспечивать на них работу драйверов без
портирования самих DDE, что уже проделано на примере некоторых других
микроядерных ОС и Linux.


------------------------------------------------------------------------
9. Каким образом решена проблема множественного доступа к устройствам?

Она решена путём добавления очередного слоя виртуализации: сервисы,
отвечающие за работу устройств, расширяются путём добавления виртуальных
интерфейсов для доступа к разделяемому физическому ресурсу. Каждое
приложение использует свой виртуальный ресурс/интерфейс, которые связаны
с физическим ресурсом некоторым слоем мультиплексирования.


------------------------------------------------------------------------
10. Что такое паравиртуализация?

Это один из способов организации виртуализации, при котором отсутствует
монитор виртуальных машин, а гостевая операционная система
модифицируется таким образом, чтобы все обращения к физическим ресурсам
заменить обращениями к соотвествующим сервисам хост-системы.

Такой подход позволяет избежать накладных расходов связанных с участием
гипервизора в процессе виртуализации, однако изменение гостевой системы
требует наличия доступа к исходным кодам гостевой ОС и, кроме того,
требует хорошего понимания о её устройстве.


------------------------------------------------------------------------
11. Как разделены адресные пространства ядра и прикладных программ
    l4linux?

В l4linux Linux-процессы обёрнуты в процессы L4, а само модифицированное
ядро Linux представляет собой процесс, также работающий в пространстве
пользователя. Это позволяет использовать существующий в Fiasco.OC
планировщик для управления этими процессами. Таким образом, ядро l4linux
и прикладные программы выполняются в собственных адресных пространствах.


------------------------------------------------------------------------
12. Как работают системные вызовы между прикладными программами и
    l4linux ядром?


------------------------------------------------------------------------
13. Что такое vCPU? как он реализован?
