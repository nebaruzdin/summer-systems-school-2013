------------------------------------------------------------------------
1. Каким образом реализована идея "Everything is Object", в чём это
   выражается?

Fiasco.OC состоит из набора объектов, которые изолированы друг от друга
и отвечают отвечают определённым службам, которые предоставляет ядро.
Пользовательские приложение также реализуют некоторые объекты, общение
между которыми осуществляется при помощи обобщённого объекта IPC gate.


------------------------------------------------------------------------
2. Что такое capability list, зачем он нужен?

Capability — это механизм, который используется в Fiasco.OC для борьбы с
проблемой глобальных идентификаторов объектов. Capability представляет
собой (условно) ссылку на канал связи (доступный только ядру) с
определённым объектом. Таким образом, capability list — это связанный с
процессом список объектов, к которым данный процесс имеет доступ.


------------------------------------------------------------------------
3. Где находится scheduler и почему?

В ядре (Fiasco.OC). Несмотря на то, что в общем случае системы,
осуществляющие различные политики в микроядерных ОС, вынесены за пределы
ядра, нахождение планировщика в пространстве пользователя несёт
дополнительную опасность для системы, так как работа ядра теперь зависит
от кода, выполняющегося в юзерспейсе. К тому же переключения контекста в
процессе общения ядра и планировщика существенно замедляют работу
системы.


------------------------------------------------------------------------
4. Что такое Sigma0, Moe, Ned, и зачем они нужны?

Sigma0 и Moe — основные менеджеры ресурсов, а Ned — загрузчик,
предоставляющий возможность запуска новых приложений, в составе L4Re.
Они выполняют те же функции, что и соответствующие системы в других
Unix-системах. Например, Ned является аналогом init'а.


------------------------------------------------------------------------
5. Что собой представляет L4Re?

L4 runtime environment — это набор компонентов операционной системы на
базе Fiasco.OC, работающих на уровне пользователя, которые предоставляют
основные службы ОС, не включённые в ядро.


------------------------------------------------------------------------
6. Что является execution unit в концепции Fiasco.OC ?

Поток (тред), в то время как процесс является единицей изоляции
(isolation unit).


------------------------------------------------------------------------
7. Что такое TCB, чет отличается от UTCB, что такое Kernel Info Block,
   где находится каждая из этих структур, зачем она нужна и как с ними
   можно работать?

Thread Control Block — это структура данных, используемая ядром для
хранения данных о потоке: IP, SP, регистры и т.д. Каждый поток имеет
собственный TCB.

User-level Thread Control Block — это расширение TCB, которое хранящее
дополнительные данных, которые не обязательно должны быть доступны
только ядру. UTCB используется для выполнения системных вызовов: в нём
хранятся параметры вызова.

Kernel Info Page — специальная страница памяти, привязанная к каждому
процессу в Fiasco.OC, которая содержит информацию о версии ядра, его
параметрах конфигурации, а также код для выполнения системных вызовов
(который может определять, какой метод системных вызовов лучше на данной
архитектуре: прерывание или sysenter).


------------------------------------------------------------------------
8. Какие механизмы сериализации доступа к переменным были озвучены в
   лекции?

Временная блокировка прерываний (невозможно в юзерспейсе), спинлоки,
мьютексы, поток-сериализатор.


------------------------------------------------------------------------
9. Что делают и зачем нужны l4_msgtag и l4_ipc_send?

l4_msgtag формирует структуру данных, определяющую протокол, длину
передаваемого сообщения в словах и время ожидания системного вызова,
которая в дальнейшем передаётся в функцию l4_ipc_send

l4_ipc_send выполняет собственно системный вызов. Она принимает на вход
capability, к которому мы обращаемся, используемый UTCB и структуру
данных, сформированную l4_msgtag.
